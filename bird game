"""
Issue: The rbp (random border point) is not changing after the hoop is collected.
when the bird collides with the hoop it collects it, but the hoop is then supposed to change direction.
The hoop insted continues on useing the same rbp and doesn't generate a new rbp.
"""

import random
import math
import pygame
from pygame import mixer

pygame.init()

# screen
WIDTH = 1200
HEIGHT = 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))

# caption/icon
pygame.display.set_caption("Bird Game")
icon = pygame.image.load('three-seagulls.png')
pygame.display.set_icon(icon)
background = pygame.image.load('BACKGROUND.png')

# player image placement
playerImg = pygame.image.load('seagull_right.png')
playerX = 400
playerY = 400
playerX_change = 0
playerY_change = 0

# hoop image placement/movement
hoopImg = []
hoopX = []
hoopY = []
hoopX_change = []
hoopY_change = []
num_of_hoops = 10

# random boarder point
rbpX = []
rbpY = []
x_or_y = []

for i in range(num_of_hoops):
    hoopImg.append(pygame.image.load('hula-hoop.png'))
    hoopX.append(random.randint(0, 1140))
    hoopY.append(random.randint(0, 740))
    rbpX.append(random.randrange(0, 801, 800))
    rbpY.append(random.randrange(0, 1201, 1200))
    x_or_y.append(random.randint(0, 1))
    hoopX_change.append((rbpX[i] - hoopX[i]) * 0.002)
    hoopY_change.append((rbpY[i] - hoopY[i]) * 0.002)

# score board
score_value = 0
font = pygame.font.Font('freesansbold.ttf', 32)
textX = 10
textY = 10


def show_score(x, y):
    score = font.render("Score :" + str(score_value), True, (0, 0, 0))
    screen.blit(score, (x, y))


def player(x, y):
    screen.blit(playerImg, (x, y))


def hoop(x, y, var):
    screen.blit(hoopImg[var], (x, y))


def is_collision(hoop_x, hoop_y, player_x, player_y):
    distance = math.sqrt((math.pow(hoop_x - player_x, 2)) + (math.pow(hoop_y - player_y, 2)))
    if distance < 27:
        return True
    else:
        return False


# game loop - "keep's game window open/running"
running = True
while running:
    # RGB
    screen.fill((0, 0, 0))

    # background image
    screen.blit(background, (0, -200))

    # allows user to close window
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # player movement v
        if event.type == pygame.KEYDOWN:
            print("Keystroke press")

            # check if L or R
            if event.key == pygame.K_a:
                playerX_change = -4.5
                playerImg = pygame.image.load('seagull_left.png')
            if event.key == pygame.K_d:
                playerX_change = 4.5
                playerImg = pygame.image.load('seagull_right.png')

            # check if UP or DOWN
            if event.key == pygame.K_w:
                playerY_change = -4.5
            if event.key == pygame.K_s:
                playerY_change = 4.5
        # check if KEYUP or KEY DOWN
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w or event.key == pygame.K_s:
                playerY_change = 0
            if event.key == pygame.K_a or event.key == pygame.K_d:
                playerX_change = 0

    playerX += playerX_change
    playerY += playerY_change
    # player movement ^

    # check if player OFB and fix
    if playerX <= 0:
        playerX = 0

    elif playerX >= 1140:
        playerX = 1140

    if playerY <= 0:
        playerY = 0

    elif playerY >= 740:
        playerY = 740

    # check if hoop OFB and fix
    for i in range(num_of_hoops):
        hoopX[i] += hoopX_change[i]
        hoopY[i] += hoopY_change[i]

        # top or bottom- or -left or right
        if x_or_y == 0:
            rbpX = random.randint(0, 1200)
        else:
            rbpY = random.randint(0, 800)

        # hoop movement/OFB fix
        if hoopX[i] <= 0:
            hoopX[i] = 0

        elif hoopX[i] >= 1140:
            hoopX[i] = 1140

        if hoopY[i] <= 0:
            hoopY[i] = 0

        elif hoopY[i] >= 740:
            hoopY[i] = 740

        collision = is_collision(hoopX[i], hoopY[i], playerX, playerY)
        if collision:
            collect_sound = mixer.Sound('collect.wav')
            collect_sound.play()
            score_value += 1
            hoopX[i] = random.randint(0, 1140)
            hoopY[i] = random.randint(0, 740)
            rbpX = random.randint(0, 1200)
            rbpY = random.randint(0, 800)

        hoop(hoopX[i], hoopY[i], i)

    player(playerX, playerY)
    show_score(textX, textY)
    pygame.display.update()
